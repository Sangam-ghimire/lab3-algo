function knapsack_01(num_items, weights, values, capacity):
  1. dp_table = [[0 for current_capacity from 0 to capacity] for item_index from 0 to num_items]

  2. for i from 1 to num_items:
    a. for current_capacity from 1 to capacity:
      i. if weights[i - 1] > current_capacity then
        1. dp_table[i][current_capacity] = dp_table[i - 1][current_capacity]
      ii. else:
        1. dp_table[i][current_capacity] = max(dp_table[i - 1][current_capacity], values[i - 1] + dp_table[i - 1][current_capacity - weights[i - 1]])

  3. max_value = dp_table[num_items][capacity]

  4. included_items = []
  5. remaining_capacity = capacity
  6. for i from num_items downto 1:
    a. if dp_table[i][remaining_capacity] != dp_table[i - 1][remaining_capacity] then
      i. included_items.append(i)
      ii. remaining_capacity -= weights[i - 1]

  7. included_items.reverse()

  8. binary_sequence = [0] * num_items
  9. for item_index in included_items:
    a. binary_sequence[item_index - 1] = 1

  10. weight_sequence = [weights[item_index - 1] for item_index in included_items]

  11. print(f"Maximum value that can be achieved: {max_value}")
  12. print("Items to include in the knapsack:")
  13. for item_index in included_items:
    a. print(f"Item {item_index}: (Weight = {weights[item_index - 1]}, Value = {values[item_index - 1]})")

  14. return max_value, weight_sequence, binary_sequence