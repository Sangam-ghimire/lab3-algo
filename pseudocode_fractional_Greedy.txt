function fractional_knapsack(weights, values, capacity):
  1. n = length(weights)
  2. value_per_unit_weight = [(values[i] / weights[i], weights[i], values[i]) for i from 0 to n - 1]
  3. value_per_unit_weight.sort(reverse=True, key=lambda x: x[0])

  4. total_value = 0.0
  5. remaining_capacity = capacity
  6. weight_sequence = []
  7. binary_sequence = []

  8. for (value_per_unit, weight, value) in value_per_unit_weight:
    a. if remaining_capacity <= 0 then
      i. break
    b. if weight <= remaining_capacity then
      i. total_value += value
      ii. remaining_capacity -= weight
      iii. weight_sequence.append(weight)
      iv. binary_sequence.append(1)
    c. else
      i. total_value += value_per_unit * remaining_capacity
      ii. weight_sequence.append(remaining_capacity)
      iii. binary_sequence.append(remaining_capacity / weight)
      iv. remaining_capacity = 0

  9. print("Maximum value that can be achieved:", total_value)

  10. print("Items to include in the knapsack:")
  11. for i from 0 to length(weight_sequence) - 1:
    a. if binary_sequence[i] > 0 then
      i. print("Item", i + 1, ": (Weight =", weight_sequence[i], ", Value =", values[i], ")")

  12. return max_value, weight_sequence and binary_sequence(fraction also)
end function
